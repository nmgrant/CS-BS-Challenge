package GameClasses;

import CardClasses.Card;
import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class GameView extends javax.swing.JFrame {

    private GameModel model;
    private Player currentPlayer;
    private Card currentCard;
    private File gameFile;

    /**
     * Creates new form GameFrame
     */
    public GameView(GameModel model, File gameFile) {
        this.model = model;
        this.gameFile = gameFile;
        currentPlayer = model.getCurrentPlayer();
        initComponents();
        initPlayerPosition(player1Label);
        initPlayerPosition(player2Label);
        initPlayerPosition(player3Label);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      gamePanel = new javax.swing.JPanel();
      moveButton = new javax.swing.JButton();
      boardWindow = new javax.swing.JScrollPane();
      boardWindowPanel = new javax.swing.JLayeredPane();
      player1Label = (model.getPlayers())[0];
      player2Label = (model.getPlayers())[1];
      player3Label = (model.getPlayers())[2];
      boardLabel = new javax.swing.JLabel();
      playCardButton = new javax.swing.JButton();
      drawCardButton = new javax.swing.JButton();
      moveListWindow = new javax.swing.JScrollPane();
      moveList = new javax.swing.JList();
      cardButton = new HandButton(currentPlayer.getHand());
      humanInfoScrollPane = new javax.swing.JScrollPane();
      playerInfo = new javax.swing.JTextArea();
      gameInfoScrollPane = new javax.swing.JScrollPane();
      informationPanel = new javax.swing.JTextArea();
      menuBar = new javax.swing.JMenuBar();
      fileMenu = new javax.swing.JMenu();
      newGame = new javax.swing.JMenuItem();
      saveGame = new javax.swing.JMenuItem();
      loadGame = new javax.swing.JMenuItem();
      separator = new javax.swing.JPopupMenu.Separator();
      exitGame = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("CS BS Challenge");
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            formWindowClosing(evt);
         }
      });

      gamePanel.setBackground(new java.awt.Color(204, 204, 204));

      moveButton.setText("Move");
      moveButton.setEnabled(false);

      boardWindow.setAutoscrolls(true);

      player1Label.setFont(new java.awt.Font("Imprint MT Shadow", 0, 48)); // NOI18N
      player1Label.setForeground(new java.awt.Color(0, 255, 0));
      player1Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      player1Label.setText(player1Label.getName());
      player1Label.setAlignmentX(0.5F);
      player1Label.setAutoscrolls(true);
      player1Label.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

      player2Label.setFont(new java.awt.Font("Imprint MT Shadow", 0, 48)); // NOI18N
      player2Label.setForeground(new java.awt.Color(0, 0, 255));
      player2Label.setText(player2Label.getName());
      player2Label.setAlignmentX(0.5F);
      player2Label.setAutoscrolls(true);
      player2Label.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

      player3Label.setFont(new java.awt.Font("Imprint MT Shadow", 0, 48)); // NOI18N
      player3Label.setForeground(new java.awt.Color(255, 0, 0));
      player3Label.setText(player3Label.getName());
      player3Label.setAlignmentX(0.5F);
      player3Label.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

      boardLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/boardMap.png"))); // NOI18N

      javax.swing.GroupLayout boardWindowPanelLayout = new javax.swing.GroupLayout(boardWindowPanel);
      boardWindowPanel.setLayout(boardWindowPanelLayout);
      boardWindowPanelLayout.setHorizontalGroup(
         boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(boardWindowPanelLayout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addComponent(player1Label)
            .addGap(5, 5, 5)
            .addComponent(player2Label)
            .addGap(5, 5, 5)
            .addComponent(player3Label)
            .addGap(5, 5, 5)
            .addComponent(boardLabel))
      );
      boardWindowPanelLayout.setVerticalGroup(
         boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(boardWindowPanelLayout.createSequentialGroup()
            .addGap(976, 976, 976)
            .addComponent(player1Label))
         .addGroup(boardWindowPanelLayout.createSequentialGroup()
            .addGap(976, 976, 976)
            .addComponent(player2Label))
         .addGroup(boardWindowPanelLayout.createSequentialGroup()
            .addGap(976, 976, 976)
            .addComponent(player3Label))
         .addGroup(boardWindowPanelLayout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addComponent(boardLabel))
      );
      boardWindowPanel.setLayer(player1Label, javax.swing.JLayeredPane.DRAG_LAYER);
      boardWindowPanel.setLayer(player2Label, javax.swing.JLayeredPane.DRAG_LAYER);
      boardWindowPanel.setLayer(player3Label, javax.swing.JLayeredPane.DRAG_LAYER);
      boardWindowPanel.setLayer(boardLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

      boardWindow.setViewportView(boardWindowPanel);

      playCardButton.setText("Play Card");
      playCardButton.setEnabled(false);

      drawCardButton.setText("Draw Card");

      Room currentRoom = currentPlayer.getRoom();
      ArrayList<Room> adjacentRooms = new ArrayList<>();
      for (int roomNumber : currentRoom.getAdjacentRooms()) {
         adjacentRooms.add(model.getRoom(roomNumber));
      }
      moveList.setModel(new javax.swing.AbstractListModel() {
         Room[] rooms = (adjacentRooms.toArray(new Room[adjacentRooms.size()]));
         public int getSize() { return rooms.length; }
         public Object getElementAt(int i) { return rooms[i]; }
      });
      moveList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
      moveListWindow.setViewportView(moveList);

      playerInfo.setEditable(false);
      playerInfo.setColumns(70);
      playerInfo.setRows(5);
      playerInfo.setText("Human player is " +model.getHumanPlayer().getName());
      humanInfoScrollPane.setViewportView(playerInfo);

      informationPanel.setEditable(false);
      informationPanel.setColumns(20);
      informationPanel.setRows(5);
      updateInformationPanel();
      gameInfoScrollPane.setViewportView(informationPanel);

      javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
      gamePanel.setLayout(gamePanelLayout);
      gamePanelLayout.setHorizontalGroup(
         gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(boardWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
         .addGroup(gamePanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                  .addComponent(playCardButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(moveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(drawCardButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
               .addComponent(moveListWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(29, 29, 29)
            .addComponent(cardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(39, 39, 39)
            .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(humanInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
               .addComponent(gameInfoScrollPane))
            .addContainerGap())
      );
      gamePanelLayout.setVerticalGroup(
         gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(gamePanelLayout.createSequentialGroup()
            .addComponent(boardWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
            .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(gamePanelLayout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(drawCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playCardButton)
                        .addGap(18, 18, 18)
                        .addComponent(moveListWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(gameInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(humanInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
               .addGroup(gamePanelLayout.createSequentialGroup()
                  .addGap(15, 15, 15)
                  .addComponent(cardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      boardWindow.getVerticalScrollBar().setUnitIncrement(25);

      fileMenu.setText("File");

      newGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
      newGame.setText("New Game");
      newGame.setToolTipText("Starts a new game");
      fileMenu.add(newGame);

      saveGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
      saveGame.setText("Save Game");
      fileMenu.add(saveGame);

      loadGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
      loadGame.setText("Load Game");
      fileMenu.add(loadGame);
      fileMenu.add(separator);

      exitGame.setText("Exit");
      fileMenu.add(exitGame);

      menuBar.add(fileMenu);

      setJMenuBar(menuBar);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (chooseSave() == 0) {
            saveGame(model, gameFile);
        }
    }//GEN-LAST:event_formWindowClosing

    private void initPlayerPosition(JLabel player) {
        boardWindowPanel.remove(player);
        player.setLocation(((Player) player).getSpace());
        boardWindowPanel.add(player);
        boardWindowPanel.updateUI();

        updateList();
        snapToCurrentPlayer();
    }

    public void updatePlayerPosition(Player player) {
        player.setLocation(player.getSpace());
        boardWindowPanel.updateUI();

        snapToCurrentPlayer();
        updateList();
    }

    public void updateList() {
        currentPlayer = model.getCurrentPlayer();

        Room currentRoom = currentPlayer.getRoom();
        ArrayList<Room> adjacentRooms = new ArrayList<>();
        for (int roomNumber : currentRoom.getAdjacentRooms()) {
            adjacentRooms.add(model.getRoom(roomNumber));
        }
        moveList.setModel(new javax.swing.AbstractListModel() {
            Room[] rooms = adjacentRooms.toArray(new Room[adjacentRooms.size()]);

            public int getSize() {
                return rooms.length;
            }

            public Object getElementAt(int i) {
                return rooms[i];
            }
        });
        if (currentPlayer.getMoves() > 0) {
            moveList.setModel(new javax.swing.AbstractListModel() {
                Room[] rooms = adjacentRooms.toArray(new Room[adjacentRooms.size()]);

                @Override
                public int getSize() {
                    return rooms.length;
                }

                @Override
                public Object getElementAt(int i) {
                    return rooms[i];
                }
            });
        } else {
            moveList.setModel(new javax.swing.AbstractListModel() {
                Room[] rooms = new Room[0];

                @Override
                public int getSize() {
                    return rooms.length;
                }

                @Override
                public Object getElementAt(int i) {
                    return rooms[i];
                }
            });
        }
    }

    public void updateInformationPanel() {
        Player player1 = model.getPlayers()[0];
        Player player2 = model.getPlayers()[1];
        Player player3 = model.getPlayers()[2];
        String[] columnNames = {"Learning",
            "Craft", "Integrity"};
        Object[][] data = {
            {player1.getName(), player1.getSkillPoints().getLearningChips(),
                player1.getSkillPoints().getCraftChips(),
                player1.getSkillPoints().getIntegrityChips(),
                player1.getQualityPoints()},
            {player2.getName(), player2.getSkillPoints().getLearningChips(),
                player2.getSkillPoints().getCraftChips(),
                player2.getSkillPoints().getIntegrityChips(),
                player2.getQualityPoints()},
            {player3.getName(), player3.getSkillPoints().getLearningChips(),
                player3.getSkillPoints().getCraftChips(),
                player3.getSkillPoints().getIntegrityChips(),
                player3.getQualityPoints()}
        };
        informationPanel.setText("\tLearning\tCraft\tIntegrity\tQuality Points\n");
        for (int i = 0; i < data.length; i++) {
            informationPanel.append(data[i][0] + " \t "
                    + data[i][1] + " \t " + data[i][2] + " \t " + data[i][3]
                    + " \t " + data[i][4] + "\n");
        }
        informationPanel.append("\n\n\n Cards in deck: "
                + model.getDeckOfCards().getNumberOfCards() + "\t Discards out of play: "
                + model.getDiscardDeck().getNumberOfCards() + "\n");

        informationPanel.append("\n\n\n You are "
                + model.getCurrentPlayer().getName() + " and you are in "
                + model.getCurrentPlayer().getRoom());

    }

    public void updateCardButton() {
        moveButton.setEnabled(true);
        playCardButton.setEnabled(true);
        drawCardButton.setEnabled(false);
        cardButton.setIcon(cardButton.getIcon());
        gamePanel.updateUI();
    }

    public void updateBottomConsole(String message) {
        playerInfo.append(message);
        playerInfo.setCaretPosition(playerInfo.getDocument().getLength());
    }

    public void snapToCurrentPlayer() {
        boardWindow.getViewport().setViewPosition(currentPlayer.getLocation());
    }

    public void addPlayCardActionPerformed(ActionListener l) {
        playCardButton.addActionListener(l);
    }

    public void selectSpecificRoom(Room selectedRoom) {
        for (int i = 0; i < moveList.getModel().getSize(); i++) {
            if (selectedRoom.equals(moveList.getModel().getElementAt(i))) {
                moveList.setSelectedIndex(i);
            }
        }
    }

    public void addMoveActionPerformed(ActionListener l) {
        moveButton.addActionListener(l);
    }

    public void addCardButtonActionPerformed(ActionListener l) {
        cardButton.addActionListener(l);
    }

    public void addDrawCardButtonActionPerformed(ActionListener l) {
        drawCardButton.addActionListener(l);
    }

    public void addNewGameActionPerformed(ActionListener l) {
        newGame.addActionListener(l);
    }

    public void addSaveGameActionPerformed(ActionListener l) {
        saveGame.addActionListener(l);
    }

    public void addLoadGameActionPerformed(ActionListener l) {
        loadGame.addActionListener(l);
    }

    public void addExitGameActionPerformed(ActionListener l) {
        exitGame.addActionListener(l);
    }

    public JButton getMove() {
        return moveButton;
    }

    public JButton getPlayCard() {
        return playCardButton;
    }

    public JList getMoveList() {
        return moveList;
    }

    public JLayeredPane getBoardWindow() {
        return boardWindowPanel;
    }

    public Card getCurrentCard() {
        return currentCard;
    }

    public HandButton getCardButton() {
        return (HandButton) cardButton;
    }

    public JButton getDrawCardButton() {
        return drawCardButton;
    }

    public void setCurrentPlayer(Player player) {
        currentPlayer = player;
    }

    public File getGameFile() {
        return gameFile;
    }

    public JPanel getGamePanel() {
        return gamePanel;
    }

    public void setModel(GameModel model) {
        this.model = model;
    }

    public int chooseSave() {
        Object[] options = {"Yes", "No"};

        return JOptionPane.showOptionDialog(new JFrame(), "Would you like to save your "
                + "game?", "Save Game", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
    }

    public void saveGame(GameModel model, File gameFile) {
        try {
            ObjectOutputStream out = new ObjectOutputStream(
                    new FileOutputStream(gameFile));

            out.writeObject(model);
            out.close();
            System.out.println("Game saved.");

        } catch (IOException e) {
            System.out.println("Error processing file.");
            e.printStackTrace();
        }
    }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel boardLabel;
   private javax.swing.JScrollPane boardWindow;
   private javax.swing.JLayeredPane boardWindowPanel;
   private javax.swing.JButton cardButton;
   private javax.swing.JButton drawCardButton;
   private javax.swing.JMenuItem exitGame;
   private javax.swing.JMenu fileMenu;
   private javax.swing.JScrollPane gameInfoScrollPane;
   private javax.swing.JPanel gamePanel;
   private javax.swing.JScrollPane humanInfoScrollPane;
   private javax.swing.JTextArea informationPanel;
   private javax.swing.JMenuItem loadGame;
   private javax.swing.JMenuBar menuBar;
   private javax.swing.JButton moveButton;
   private javax.swing.JList moveList;
   private javax.swing.JScrollPane moveListWindow;
   private javax.swing.JMenuItem newGame;
   private javax.swing.JButton playCardButton;
   private javax.swing.JLabel player1Label;
   private javax.swing.JLabel player2Label;
   private javax.swing.JLabel player3Label;
   private javax.swing.JTextArea playerInfo;
   private javax.swing.JMenuItem saveGame;
   private javax.swing.JPopupMenu.Separator separator;
   // End of variables declaration//GEN-END:variables

}
