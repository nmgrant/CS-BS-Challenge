
import javax.swing.*;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GameFrame extends javax.swing.JFrame {
    
    private GameModel model;
    private GameModel.Player currentPlayer;
    /**
     * Creates new form GameFrame
     */
    
    public GameFrame(GameModel model) {
        this.model = model;
        currentPlayer = model.getCurrentPlayer();
        initComponents();
        initPlayerPosition(player1Label);
        initPlayerPosition(player2Label);
        initPlayerPosition(player3Label);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new javax.swing.JPanel();
        moveButton = new javax.swing.JButton();
        boardWindow = new javax.swing.JScrollPane();
        boardWindowPanel = new javax.swing.JLayeredPane();
        player1Label = (model.getPlayers())[0];
        player2Label = (model.getPlayers())[1];
        player3Label = (model.getPlayers())[2];
        boardLabel = new javax.swing.JLabel();
        playCardButton = new javax.swing.JButton();
        drawCardButton = new javax.swing.JButton();
        moveListWindow = new javax.swing.JScrollPane();
        moveList = new javax.swing.JList();
        cardButton = new javax.swing.JButton();
        humanInfoScrollPane = new javax.swing.JScrollPane();
        humanInfo = new javax.swing.JTextArea();
        gameInfoScrollPane = new javax.swing.JScrollPane();
        gameInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gamePanel.setBackground(new java.awt.Color(204, 204, 204));

        moveButton.setText("Move");

        boardWindow.setAutoscrolls(true);

        player1Label.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        player1Label.setForeground(new java.awt.Color(255, 51, 0));
        player1Label.setText(player1Label.getName());

        player2Label.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        player2Label.setForeground(new java.awt.Color(255, 51, 0));
        player2Label.setText(player2Label.getName());

        player3Label.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        player3Label.setForeground(new java.awt.Color(255, 51, 0));
        player3Label.setText(player3Label.getName());

        boardLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/boardMap.png"))); // NOI18N

        javax.swing.GroupLayout boardWindowPanelLayout = new javax.swing.GroupLayout(boardWindowPanel);
        boardWindowPanel.setLayout(boardWindowPanelLayout);
        boardWindowPanelLayout.setHorizontalGroup(
            boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boardWindowPanelLayout.createSequentialGroup()
                .addGap(444, 444, 444)
                .addComponent(player1Label)
                .addContainerGap(940, Short.MAX_VALUE))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(boardLabel)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(player2Label)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(player3Label)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        boardWindowPanelLayout.setVerticalGroup(
            boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boardWindowPanelLayout.createSequentialGroup()
                .addContainerGap(1166, Short.MAX_VALUE)
                .addComponent(player1Label)
                .addGap(776, 776, 776))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(boardLabel)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(player2Label)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(boardWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardWindowPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(player3Label)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        boardWindowPanel.setLayer(player1Label, javax.swing.JLayeredPane.DRAG_LAYER);
        boardWindowPanel.setLayer(player2Label, javax.swing.JLayeredPane.DRAG_LAYER);
        boardWindowPanel.setLayer(player3Label, javax.swing.JLayeredPane.DRAG_LAYER);
        boardWindowPanel.setLayer(boardLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        boardWindow.setViewportView(boardWindowPanel);

        playCardButton.setText("Play Card");

        drawCardButton.setText("Draw Card");

        int playerRoom = currentPlayer.getRoomNumber();
        GameModel.Room currentRoom = model.getRoom(playerRoom);
        moveList.setModel(new javax.swing.AbstractListModel() {
            public GameModel.Room[] initializeList() {
                GameModel.Room[] rooms = new GameModel.Room[currentRoom.getAdjacentRooms().length];
                for (int i = 0; i < rooms.length; i++) {
                    rooms[i] = currentRoom.getAdjacentRooms()[i];
                }
                return rooms;
            }
            public int getSize() { return rooms.length; }
            public Object getElementAt(int i) { return rooms[i]; }
            GameModel.Room[] rooms = initializeList();
        });
        moveList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        moveListWindow.setViewportView(moveList);

        cardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/card.PNG"))); // NOI18N
        cardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardButtonActionPerformed(evt);
            }
        });

        humanInfo.setEditable(false);
        humanInfo.setColumns(20);
        humanInfo.setRows(5);
        humanInfo.setText("Human player is " + model.getHumanPlayer().getName());
        humanInfoScrollPane.setViewportView(humanInfo);

        gameInfo.setEditable(false);
        gameInfo.setColumns(20);
        gameInfo.setRows(5);
        gameInfoScrollPane.setViewportView(gameInfo);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardWindow)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(playCardButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drawCardButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                    .addComponent(moveListWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(humanInfoScrollPane)
                    .addComponent(gameInfoScrollPane))
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(boardWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 2003, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(drawCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playCardButton)
                        .addGap(18, 18, 18)
                        .addComponent(moveListWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(gameInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(humanInfoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        boardWindow.getVerticalScrollBar().setUnitIncrement(25);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1674, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2317, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**/
    private void cardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardButtonActionPerformed
        if (((ImageIcon) cardButton.getIcon()).getDescription().equals("card.PNG"))
            cardButton.setIcon(new ImageIcon("card2.PNG"));
        else
            cardButton.setIcon(new ImageIcon("card.PNG"));
    }//GEN-LAST:event_cardButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }  
        });
    }*/
    public void initPlayerPosition(JLabel player) {
        boardWindowPanel.remove(player);
        player.setLocation(((GameModel.Player)player).getSpace());
        boardWindowPanel.add(player);
        boardWindowPanel.repaint();
        
        updateList();
    }
    public void updatePlayerPosition(JLabel player) {
        
        boardWindowPanel.remove(player);
        player.setLocation(model.getCurrentPlayer().getSpace());
        boardWindowPanel.add(player);
        boardWindowPanel.repaint();
        
        updateList();
    }
    
    public void updateList() {
        currentPlayer = model.getCurrentPlayer();
        int playerRoom = currentPlayer.getRoomNumber();
        GameModel.Room currentRoom = model.getRoom(playerRoom);
        moveList.setModel(new javax.swing.AbstractListModel() {
            public GameModel.Room[] initializeList() {
                GameModel.Room[] rooms = new GameModel.Room[currentRoom.getAdjacentRooms().length];
                for (int i = 0; i < rooms.length; i++) {
                    rooms[i] = currentRoom.getAdjacentRooms()[i];
                }
                return rooms;
            }
            public int getSize() { return rooms.length; }
            public Object getElementAt(int i) { return rooms[i]; }
            GameModel.Room[] rooms = initializeList();
        });
    }
    
    public void updateCurrent() {
        humanInfo.setText("Current player is " + model.getCurrentPlayer().getName());
    }
    
    public void addPlayCardActionPerformed(ActionListener l) {
        playCardButton.addActionListener(l);
    }
    
    public void addMoveActionPerformed(ActionListener l) {
        moveButton.addActionListener(l);
    }
    
    public JButton getMove() {
        return moveButton;
    }
    
    public JButton getPlayCard() {
        return playCardButton;
    }
    
    public JList getMoveList() {
        return moveList;
    }
    
    public JLayeredPane getBoardWindow() {
        return boardWindowPanel;
    }
    
    public void setCurrentPlayer(GameModel.Player player) {
        currentPlayer = player;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel boardLabel;
    private javax.swing.JScrollPane boardWindow;
    private javax.swing.JLayeredPane boardWindowPanel;
    private javax.swing.JButton cardButton;
    private javax.swing.JButton drawCardButton;
    private javax.swing.JTextArea gameInfo;
    private javax.swing.JScrollPane gameInfoScrollPane;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JTextArea humanInfo;
    private javax.swing.JScrollPane humanInfoScrollPane;
    private javax.swing.JButton moveButton;
    private javax.swing.JList moveList;
    private javax.swing.JScrollPane moveListWindow;
    private javax.swing.JButton playCardButton;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel player3Label;
    // End of variables declaration//GEN-END:variables
}
